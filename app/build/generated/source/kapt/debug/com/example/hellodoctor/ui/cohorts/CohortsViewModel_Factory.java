// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.cohorts;

import com.example.hellodoctor.core.repository.cohorts.CohortsRepo;
import com.example.hellodoctor.core.repository.meeting.MeetingRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CohortsViewModel_Factory implements Factory<CohortsViewModel> {
  private final Provider<CohortsRepo> cohortsRepositoryProvider;

  private final Provider<MeetingRepo> meetingRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public CohortsViewModel_Factory(Provider<CohortsRepo> cohortsRepositoryProvider,
      Provider<MeetingRepo> meetingRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.cohortsRepositoryProvider = cohortsRepositoryProvider;
    this.meetingRepositoryProvider = meetingRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public CohortsViewModel get() {
    return newInstance(cohortsRepositoryProvider.get(), meetingRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static CohortsViewModel_Factory create(Provider<CohortsRepo> cohortsRepositoryProvider,
      Provider<MeetingRepo> meetingRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new CohortsViewModel_Factory(cohortsRepositoryProvider, meetingRepositoryProvider, coroutineDispatcherProvider);
  }

  public static CohortsViewModel newInstance(CohortsRepo cohortsRepository,
      MeetingRepo meetingRepository, CoroutineDispatcher coroutineDispatcher) {
    return new CohortsViewModel(cohortsRepository, meetingRepository, coroutineDispatcher);
  }
}
