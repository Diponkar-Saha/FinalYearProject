// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.cohorts.newcohort;

import com.example.hellodoctor.core.repository.cohorts.CohortsRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddNewCohortViewModel_Factory implements Factory<AddNewCohortViewModel> {
  private final Provider<CohortsRepo> repositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public AddNewCohortViewModel_Factory(Provider<CohortsRepo> repositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.repositoryProvider = repositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public AddNewCohortViewModel get() {
    return newInstance(repositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static AddNewCohortViewModel_Factory create(Provider<CohortsRepo> repositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new AddNewCohortViewModel_Factory(repositoryProvider, coroutineDispatcherProvider);
  }

  public static AddNewCohortViewModel newInstance(CohortsRepo repository,
      CoroutineDispatcher coroutineDispatcher) {
    return new AddNewCohortViewModel(repository, coroutineDispatcher);
  }
}
