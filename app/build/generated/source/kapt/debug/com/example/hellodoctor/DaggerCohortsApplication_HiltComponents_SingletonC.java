// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.hellodoctor.core.CoroutinesModule;
import com.example.hellodoctor.core.CoroutinesModule_ProvideCoroutineDispatcherFactory;
import com.example.hellodoctor.core.FirebaseModule;
import com.example.hellodoctor.core.FirebaseModule_ProvideBaseUrlFactory;
import com.example.hellodoctor.core.FirebaseModule_ProvideFirebaseAuthFactory;
import com.example.hellodoctor.core.FirebaseModule_ProvideFirebaseDatabaseFactory;
import com.example.hellodoctor.core.FirebaseModule_ProvideFirebaseStorageFactory;
import com.example.hellodoctor.core.FirebaseModule_ProvideFirestoreFactory;
import com.example.hellodoctor.core.FirebaseModule_ProvideRetrofitInstanceFactory;
import com.example.hellodoctor.core.FirebaseModule_ProvidesSharedPreferencesFactory;
import com.example.hellodoctor.core.repository.chat.ChatRepository;
import com.example.hellodoctor.core.repository.cohorts.CohortsRepo;
import com.example.hellodoctor.core.repository.cohorts.CohortsRepository;
import com.example.hellodoctor.core.repository.meeting.MeetingRepo;
import com.example.hellodoctor.core.repository.meeting.MeetingRepository;
import com.example.hellodoctor.core.repository.tasks.TasksRepo;
import com.example.hellodoctor.core.repository.tasks.TasksRepository;
import com.example.hellodoctor.core.repository.theme.ThemeRepo;
import com.example.hellodoctor.core.repository.theme.ThemeRepository;
import com.example.hellodoctor.core.repository.user.UserRepository;
import com.example.hellodoctor.core.storage.SharedPreferenceStorage;
import com.example.hellodoctor.core.storage.Storage;
import com.example.hellodoctor.repositort.AuthRepository;
import com.example.hellodoctor.repositort.FirebaseAuthRepository;
import com.example.hellodoctor.repositort.FirebaseAuthViewModel;
import com.example.hellodoctor.repositort.FirebaseAuthViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.repositort.Preferences;
import com.example.hellodoctor.repositort.SpecialRepository;
import com.example.hellodoctor.ui.chat.ChatFragment;
import com.example.hellodoctor.ui.chat.ChatViewModel;
import com.example.hellodoctor.ui.chat.ChatViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.cohorts.CohortsViewModel;
import com.example.hellodoctor.ui.cohorts.CohortsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.cohorts.newcohort.AddNewCohortViewModel;
import com.example.hellodoctor.ui.cohorts.newcohort.AddNewCohortViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.cohorts.newmember.AddNewMemberFragment;
import com.example.hellodoctor.ui.cohorts.newmember.AddNewMemberViewModel;
import com.example.hellodoctor.ui.cohorts.newmember.AddNewMemberViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.doctor.AppoinntmentViewModel;
import com.example.hellodoctor.ui.doctor.AppoinntmentViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.doctor.DoctorActivity;
import com.example.hellodoctor.ui.doctor.DoctorDashFragment;
import com.example.hellodoctor.ui.doctor.EditDoctorProfileViewModel;
import com.example.hellodoctor.ui.doctor.EditDoctorProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.info.CohortInfoViewModel;
import com.example.hellodoctor.ui.info.CohortInfoViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.login.DrLoginActivity;
import com.example.hellodoctor.ui.login.Login1ViewModel;
import com.example.hellodoctor.ui.login.Login1ViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.login.LoginActivity;
import com.example.hellodoctor.ui.login.LoginViewModel;
import com.example.hellodoctor.ui.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.login.PublicLoginActivity;
import com.example.hellodoctor.ui.main.MainViewModel;
import com.example.hellodoctor.ui.main.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.profile.ProfileFragment;
import com.example.hellodoctor.ui.profile.ProfileViewModel;
import com.example.hellodoctor.ui.profile.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.publicuser.PublUserActivity;
import com.example.hellodoctor.ui.publicuser.viewmodel.DoctorProfileViewModel;
import com.example.hellodoctor.ui.publicuser.viewmodel.DoctorProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.publicuser.viewmodel.HomeViewmodel;
import com.example.hellodoctor.ui.publicuser.viewmodel.HomeViewmodel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.register.AUthViewModel;
import com.example.hellodoctor.ui.register.AUthViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.register.DrRegisterActivity;
import com.example.hellodoctor.ui.register.PublicRegisterActivity;
import com.example.hellodoctor.ui.splash.SplashViewModel;
import com.example.hellodoctor.ui.splash.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.tasks.TasksFragment;
import com.example.hellodoctor.ui.tasks.TasksViewModel;
import com.example.hellodoctor.ui.tasks.TasksViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.tasks.addNewTask.AddNewTaskFragment;
import com.example.hellodoctor.ui.tasks.addNewTask.AddNewTaskViewModel;
import com.example.hellodoctor.ui.tasks.addNewTask.AddNewTaskViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.ui.tasks.taskdetail.TaskDetailFragment;
import com.example.hellodoctor.ui.tasks.taskdetail.TaskDetailViewModel;
import com.example.hellodoctor.ui.tasks.taskdetail.TaskDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.hellodoctor.video.ui.cohorts.CohortsFragment;
import com.example.hellodoctor.video.ui.cohorts.newcohort.AddNewCohort;
import com.example.hellodoctor.video.ui.info.CohortInfoFragment;
import com.example.hellodoctor.video.ui.main.MainActivity;
import com.example.hellodoctor.video.ui.splash.SplashScreenActivity;
import com.example.hellodoctor.viewmodel.DoctorRepository;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.FirebaseStorage;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCohortsApplication_HiltComponents_SingletonC extends CohortsApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object apiService = new MemoizedSentinel();

  private volatile Object firebaseFirestore = new MemoizedSentinel();

  private volatile Object firebaseAuth = new MemoizedSentinel();

  private volatile Object firebaseDatabase = new MemoizedSentinel();

  private volatile Object cohortsRepo = new MemoizedSentinel();

  private volatile Object sharedPreferences = new MemoizedSentinel();

  private volatile Object tasksRepo = new MemoizedSentinel();

  private volatile Object firebaseStorage = new MemoizedSentinel();

  private volatile Object chatRepository = new MemoizedSentinel();

  private volatile Object userRepository = new MemoizedSentinel();

  private volatile Object storage = new MemoizedSentinel();

  private volatile Object themeRepo = new MemoizedSentinel();

  private DaggerCohortsApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private ApiService apiService() {
    Object local = apiService;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = apiService;
        if (local instanceof MemoizedSentinel) {
          local = FirebaseModule_ProvideRetrofitInstanceFactory.provideRetrofitInstance(FirebaseModule_ProvideBaseUrlFactory.provideBaseUrl());
          apiService = DoubleCheck.reentrantCheck(apiService, local);
        }
      }
    }
    return (ApiService) local;
  }

  private FirebaseFirestore firebaseFirestore() {
    Object local = firebaseFirestore;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = firebaseFirestore;
        if (local instanceof MemoizedSentinel) {
          local = FirebaseModule_ProvideFirestoreFactory.provideFirestore();
          firebaseFirestore = DoubleCheck.reentrantCheck(firebaseFirestore, local);
        }
      }
    }
    return (FirebaseFirestore) local;
  }

  private FirebaseAuth firebaseAuth() {
    Object local = firebaseAuth;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = firebaseAuth;
        if (local instanceof MemoizedSentinel) {
          local = FirebaseModule_ProvideFirebaseAuthFactory.provideFirebaseAuth();
          firebaseAuth = DoubleCheck.reentrantCheck(firebaseAuth, local);
        }
      }
    }
    return (FirebaseAuth) local;
  }

  private FirebaseDatabase firebaseDatabase() {
    Object local = firebaseDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = firebaseDatabase;
        if (local instanceof MemoizedSentinel) {
          local = FirebaseModule_ProvideFirebaseDatabaseFactory.provideFirebaseDatabase();
          firebaseDatabase = DoubleCheck.reentrantCheck(firebaseDatabase, local);
        }
      }
    }
    return (FirebaseDatabase) local;
  }

  private CohortsRepository cohortsRepository() {
    return new CohortsRepository(firebaseFirestore(), firebaseAuth(), firebaseDatabase());
  }

  private CohortsRepo cohortsRepo() {
    Object local = cohortsRepo;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = cohortsRepo;
        if (local instanceof MemoizedSentinel) {
          local = cohortsRepository();
          cohortsRepo = DoubleCheck.reentrantCheck(cohortsRepo, local);
        }
      }
    }
    return (CohortsRepo) local;
  }

  private SharedPreferences sharedPreferences() {
    Object local = sharedPreferences;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = sharedPreferences;
        if (local instanceof MemoizedSentinel) {
          local = FirebaseModule_ProvidesSharedPreferencesFactory.providesSharedPreferences(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          sharedPreferences = DoubleCheck.reentrantCheck(sharedPreferences, local);
        }
      }
    }
    return (SharedPreferences) local;
  }

  private TasksRepository tasksRepository() {
    return new TasksRepository(firebaseDatabase());
  }

  private TasksRepo tasksRepo() {
    Object local = tasksRepo;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = tasksRepo;
        if (local instanceof MemoizedSentinel) {
          local = tasksRepository();
          tasksRepo = DoubleCheck.reentrantCheck(tasksRepo, local);
        }
      }
    }
    return (TasksRepo) local;
  }

  private FirebaseStorage firebaseStorage() {
    Object local = firebaseStorage;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = firebaseStorage;
        if (local instanceof MemoizedSentinel) {
          local = FirebaseModule_ProvideFirebaseStorageFactory.provideFirebaseStorage();
          firebaseStorage = DoubleCheck.reentrantCheck(firebaseStorage, local);
        }
      }
    }
    return (FirebaseStorage) local;
  }

  private ChatRepository chatRepository() {
    Object local = chatRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = chatRepository;
        if (local instanceof MemoizedSentinel) {
          local = new ChatRepository(firebaseDatabase(), firebaseStorage());
          chatRepository = DoubleCheck.reentrantCheck(chatRepository, local);
        }
      }
    }
    return (ChatRepository) local;
  }

  private UserRepository userRepository() {
    Object local = userRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = userRepository;
        if (local instanceof MemoizedSentinel) {
          local = new UserRepository(firebaseFirestore(), firebaseAuth());
          userRepository = DoubleCheck.reentrantCheck(userRepository, local);
        }
      }
    }
    return (UserRepository) local;
  }

  private SharedPreferenceStorage sharedPreferenceStorage() {
    return new SharedPreferenceStorage(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private Storage storage() {
    Object local = storage;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = storage;
        if (local instanceof MemoizedSentinel) {
          local = sharedPreferenceStorage();
          storage = DoubleCheck.reentrantCheck(storage, local);
        }
      }
    }
    return (Storage) local;
  }

  private ThemeRepository themeRepository() {
    return new ThemeRepository(storage());
  }

  private ThemeRepo themeRepo() {
    Object local = themeRepo;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = themeRepo;
        if (local instanceof MemoizedSentinel) {
          local = themeRepository();
          themeRepo = DoubleCheck.reentrantCheck(themeRepo, local);
        }
      }
    }
    return (ThemeRepo) local;
  }

  @Override
  public void injectCohortsApplication(CohortsApplication cohortsApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder coroutinesModule(CoroutinesModule coroutinesModule) {
      Preconditions.checkNotNull(coroutinesModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder firebaseModule(FirebaseModule firebaseModule) {
      Preconditions.checkNotNull(firebaseModule);
      return this;
    }

    public CohortsApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerCohortsApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements CohortsApplication_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public CohortsApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends CohortsApplication_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private volatile Object meetingRepo = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    private MeetingRepository meetingRepository() {
      return new MeetingRepository(DaggerCohortsApplication_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerCohortsApplication_HiltComponents_SingletonC.this.firebaseAuth());
    }

    private MeetingRepo meetingRepo() {
      Object local = meetingRepo;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = meetingRepo;
          if (local instanceof MemoizedSentinel) {
            local = meetingRepository();
            meetingRepo = DoubleCheck.reentrantCheck(meetingRepo, local);
          }
        }
      }
      return (MeetingRepo) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements CohortsApplication_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public CohortsApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends CohortsApplication_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectDoctorActivity(DoctorActivity doctorActivity) {
      }

      @Override
      public void injectDrLoginActivity(DrLoginActivity drLoginActivity) {
      }

      @Override
      public void injectLoginActivity(LoginActivity loginActivity) {
      }

      @Override
      public void injectPublicLoginActivity(PublicLoginActivity publicLoginActivity) {
      }

      @Override
      public void injectPublUserActivity(PublUserActivity publUserActivity) {
      }

      @Override
      public void injectDrRegisterActivity(DrRegisterActivity drRegisterActivity) {
      }

      @Override
      public void injectPublicRegisterActivity(PublicRegisterActivity publicRegisterActivity) {
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public void injectSplashScreenActivity(SplashScreenActivity splashScreenActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerCohortsApplication_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return ImmutableSet.<String>of(AUthViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AddNewCohortViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AddNewMemberViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AddNewTaskViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AppoinntmentViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ChatViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CohortInfoViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CohortsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DoctorProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide(), EditDoctorProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FirebaseAuthViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HomeViewmodel_HiltModules_KeyModule_ProvideFactory.provide(), Login1ViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MainViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide(), TaskDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), TasksViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements CohortsApplication_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public CohortsApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(fragment);
        }
      }

      private final class FragmentCI extends CohortsApplication_HiltComponents.FragmentC {
        private FragmentCI(Fragment fragment) {

        }

        @Override
        public void injectChatFragment(ChatFragment chatFragment) {
        }

        @Override
        public void injectAddNewMemberFragment(AddNewMemberFragment addNewMemberFragment) {
        }

        @Override
        public void injectDoctorDashFragment(DoctorDashFragment doctorDashFragment) {
        }

        @Override
        public void injectProfileFragment(ProfileFragment profileFragment) {
        }

        @Override
        public void injectTasksFragment(TasksFragment tasksFragment) {
        }

        @Override
        public void injectAddNewTaskFragment(AddNewTaskFragment addNewTaskFragment) {
        }

        @Override
        public void injectTaskDetailFragment(TaskDetailFragment taskDetailFragment) {
        }

        @Override
        public void injectCohortsFragment(CohortsFragment cohortsFragment) {
        }

        @Override
        public void injectAddNewCohort(AddNewCohort addNewCohort) {
        }

        @Override
        public void injectCohortInfoFragment(CohortInfoFragment cohortInfoFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements CohortsApplication_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public CohortsApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends CohortsApplication_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements CohortsApplication_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public CohortsApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends CohortsApplication_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements CohortsApplication_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public CohortsApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends CohortsApplication_HiltComponents.ViewModelC {
      private volatile Provider<AUthViewModel> aUthViewModelProvider;

      private volatile Provider<AddNewCohortViewModel> addNewCohortViewModelProvider;

      private volatile Provider<AddNewMemberViewModel> addNewMemberViewModelProvider;

      private volatile Provider<AddNewTaskViewModel> addNewTaskViewModelProvider;

      private volatile Provider<AppoinntmentViewModel> appoinntmentViewModelProvider;

      private volatile Provider<ChatViewModel> chatViewModelProvider;

      private volatile Provider<CohortInfoViewModel> cohortInfoViewModelProvider;

      private volatile Provider<CohortsViewModel> cohortsViewModelProvider;

      private volatile Provider<DoctorProfileViewModel> doctorProfileViewModelProvider;

      private volatile Provider<EditDoctorProfileViewModel> editDoctorProfileViewModelProvider;

      private volatile Provider<FirebaseAuthViewModel> firebaseAuthViewModelProvider;

      private volatile Provider<HomeViewmodel> homeViewmodelProvider;

      private volatile Provider<Login1ViewModel> login1ViewModelProvider;

      private volatile Provider<LoginViewModel> loginViewModelProvider;

      private volatile Provider<MainViewModel> mainViewModelProvider;

      private volatile Provider<ProfileViewModel> profileViewModelProvider;

      private volatile Provider<SplashViewModel> splashViewModelProvider;

      private volatile Provider<TaskDetailViewModel> taskDetailViewModelProvider;

      private volatile Provider<TasksViewModel> tasksViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private AuthRepository authRepository() {
        return new AuthRepository(DaggerCohortsApplication_HiltComponents_SingletonC.this.apiService());
      }

      private AUthViewModel aUthViewModel() {
        return new AUthViewModel(authRepository());
      }

      private Provider<AUthViewModel> aUthViewModelProvider() {
        Object local = aUthViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          aUthViewModelProvider = (Provider<AUthViewModel>) local;
        }
        return (Provider<AUthViewModel>) local;
      }

      private AddNewCohortViewModel addNewCohortViewModel() {
        return new AddNewCohortViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.cohortsRepo(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<AddNewCohortViewModel> addNewCohortViewModelProvider() {
        Object local = addNewCohortViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          addNewCohortViewModelProvider = (Provider<AddNewCohortViewModel>) local;
        }
        return (Provider<AddNewCohortViewModel>) local;
      }

      private Preferences preferences() {
        return new Preferences(DaggerCohortsApplication_HiltComponents_SingletonC.this.sharedPreferences());
      }

      private AddNewMemberViewModel addNewMemberViewModel() {
        return new AddNewMemberViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.cohortsRepo(), preferences(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<AddNewMemberViewModel> addNewMemberViewModelProvider() {
        Object local = addNewMemberViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          addNewMemberViewModelProvider = (Provider<AddNewMemberViewModel>) local;
        }
        return (Provider<AddNewMemberViewModel>) local;
      }

      private AddNewTaskViewModel addNewTaskViewModel() {
        return new AddNewTaskViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.tasksRepo(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<AddNewTaskViewModel> addNewTaskViewModelProvider() {
        Object local = addNewTaskViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          addNewTaskViewModelProvider = (Provider<AddNewTaskViewModel>) local;
        }
        return (Provider<AddNewTaskViewModel>) local;
      }

      private DoctorRepository doctorRepository() {
        return new DoctorRepository(DaggerCohortsApplication_HiltComponents_SingletonC.this.apiService());
      }

      private AppoinntmentViewModel appoinntmentViewModel() {
        return new AppoinntmentViewModel(doctorRepository(), preferences());
      }

      private Provider<AppoinntmentViewModel> appoinntmentViewModelProvider() {
        Object local = appoinntmentViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(4);
          appoinntmentViewModelProvider = (Provider<AppoinntmentViewModel>) local;
        }
        return (Provider<AppoinntmentViewModel>) local;
      }

      private ChatViewModel chatViewModel() {
        return new ChatViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.cohortsRepo(), DaggerCohortsApplication_HiltComponents_SingletonC.this.chatRepository(), ActivityRetainedCImpl.this.meetingRepo(), DaggerCohortsApplication_HiltComponents_SingletonC.this.userRepository(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<ChatViewModel> chatViewModelProvider() {
        Object local = chatViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(5);
          chatViewModelProvider = (Provider<ChatViewModel>) local;
        }
        return (Provider<ChatViewModel>) local;
      }

      private CohortInfoViewModel cohortInfoViewModel() {
        return new CohortInfoViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.cohortsRepo(), DaggerCohortsApplication_HiltComponents_SingletonC.this.userRepository(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<CohortInfoViewModel> cohortInfoViewModelProvider() {
        Object local = cohortInfoViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(6);
          cohortInfoViewModelProvider = (Provider<CohortInfoViewModel>) local;
        }
        return (Provider<CohortInfoViewModel>) local;
      }

      private CohortsViewModel cohortsViewModel() {
        return new CohortsViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.cohortsRepo(), ActivityRetainedCImpl.this.meetingRepo(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<CohortsViewModel> cohortsViewModelProvider() {
        Object local = cohortsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(7);
          cohortsViewModelProvider = (Provider<CohortsViewModel>) local;
        }
        return (Provider<CohortsViewModel>) local;
      }

      private SpecialRepository specialRepository() {
        return new SpecialRepository(DaggerCohortsApplication_HiltComponents_SingletonC.this.apiService());
      }

      private DoctorProfileViewModel doctorProfileViewModel() {
        return new DoctorProfileViewModel(specialRepository());
      }

      private Provider<DoctorProfileViewModel> doctorProfileViewModelProvider() {
        Object local = doctorProfileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(8);
          doctorProfileViewModelProvider = (Provider<DoctorProfileViewModel>) local;
        }
        return (Provider<DoctorProfileViewModel>) local;
      }

      private EditDoctorProfileViewModel editDoctorProfileViewModel() {
        return new EditDoctorProfileViewModel(doctorRepository(), preferences());
      }

      private Provider<EditDoctorProfileViewModel> editDoctorProfileViewModelProvider() {
        Object local = editDoctorProfileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(9);
          editDoctorProfileViewModelProvider = (Provider<EditDoctorProfileViewModel>) local;
        }
        return (Provider<EditDoctorProfileViewModel>) local;
      }

      private FirebaseAuthRepository firebaseAuthRepository() {
        return new FirebaseAuthRepository(DaggerCohortsApplication_HiltComponents_SingletonC.this.firebaseAuth(), DaggerCohortsApplication_HiltComponents_SingletonC.this.firebaseFirestore(), DaggerCohortsApplication_HiltComponents_SingletonC.this.firebaseStorage(), preferences(), ApplicationContextModule_ProvideContextFactory.provideContext(DaggerCohortsApplication_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private FirebaseAuthViewModel firebaseAuthViewModel() {
        return new FirebaseAuthViewModel(firebaseAuthRepository());
      }

      private Provider<FirebaseAuthViewModel> firebaseAuthViewModelProvider() {
        Object local = firebaseAuthViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(10);
          firebaseAuthViewModelProvider = (Provider<FirebaseAuthViewModel>) local;
        }
        return (Provider<FirebaseAuthViewModel>) local;
      }

      private HomeViewmodel homeViewmodel() {
        return new HomeViewmodel(specialRepository());
      }

      private Provider<HomeViewmodel> homeViewmodelProvider() {
        Object local = homeViewmodelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(11);
          homeViewmodelProvider = (Provider<HomeViewmodel>) local;
        }
        return (Provider<HomeViewmodel>) local;
      }

      private Login1ViewModel login1ViewModel() {
        return new Login1ViewModel(authRepository(), preferences());
      }

      private Provider<Login1ViewModel> login1ViewModelProvider() {
        Object local = login1ViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(12);
          login1ViewModelProvider = (Provider<Login1ViewModel>) local;
        }
        return (Provider<Login1ViewModel>) local;
      }

      private LoginViewModel loginViewModel() {
        return new LoginViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.userRepository(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<LoginViewModel> loginViewModelProvider() {
        Object local = loginViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(13);
          loginViewModelProvider = (Provider<LoginViewModel>) local;
        }
        return (Provider<LoginViewModel>) local;
      }

      private MainViewModel mainViewModel() {
        return new MainViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.themeRepo(), ActivityRetainedCImpl.this.meetingRepo(), DaggerCohortsApplication_HiltComponents_SingletonC.this.userRepository(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<MainViewModel> mainViewModelProvider() {
        Object local = mainViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(14);
          mainViewModelProvider = (Provider<MainViewModel>) local;
        }
        return (Provider<MainViewModel>) local;
      }

      private ProfileViewModel profileViewModel() {
        return new ProfileViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.userRepository());
      }

      private Provider<ProfileViewModel> profileViewModelProvider() {
        Object local = profileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(15);
          profileViewModelProvider = (Provider<ProfileViewModel>) local;
        }
        return (Provider<ProfileViewModel>) local;
      }

      private SplashViewModel splashViewModel() {
        return new SplashViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.themeRepo(), DaggerCohortsApplication_HiltComponents_SingletonC.this.userRepository(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<SplashViewModel> splashViewModelProvider() {
        Object local = splashViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(16);
          splashViewModelProvider = (Provider<SplashViewModel>) local;
        }
        return (Provider<SplashViewModel>) local;
      }

      private TaskDetailViewModel taskDetailViewModel() {
        return new TaskDetailViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.tasksRepo(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<TaskDetailViewModel> taskDetailViewModelProvider() {
        Object local = taskDetailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(17);
          taskDetailViewModelProvider = (Provider<TaskDetailViewModel>) local;
        }
        return (Provider<TaskDetailViewModel>) local;
      }

      private TasksViewModel tasksViewModel() {
        return new TasksViewModel(DaggerCohortsApplication_HiltComponents_SingletonC.this.tasksRepo(), CoroutinesModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher());
      }

      private Provider<TasksViewModel> tasksViewModelProvider() {
        Object local = tasksViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(18);
          tasksViewModelProvider = (Provider<TasksViewModel>) local;
        }
        return (Provider<TasksViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(19).put("com.example.cohorts.ui.register.AUthViewModel", (Provider) aUthViewModelProvider()).put("com.example.cohorts.ui.cohorts.newcohort.AddNewCohortViewModel", (Provider) addNewCohortViewModelProvider()).put("com.example.cohorts.ui.cohorts.newmember.AddNewMemberViewModel", (Provider) addNewMemberViewModelProvider()).put("com.example.cohorts.ui.tasks.addNewTask.AddNewTaskViewModel", (Provider) addNewTaskViewModelProvider()).put("com.example.cohorts.ui.doctor.AppoinntmentViewModel", (Provider) appoinntmentViewModelProvider()).put("com.example.cohorts.ui.chat.ChatViewModel", (Provider) chatViewModelProvider()).put("com.example.cohorts.ui.info.CohortInfoViewModel", (Provider) cohortInfoViewModelProvider()).put("com.example.cohorts.ui.cohorts.CohortsViewModel", (Provider) cohortsViewModelProvider()).put("com.example.cohorts.ui.publicuser.viewmodel.DoctorProfileViewModel", (Provider) doctorProfileViewModelProvider()).put("com.example.cohorts.ui.doctor.EditDoctorProfileViewModel", (Provider) editDoctorProfileViewModelProvider()).put("com.example.cohorts.repositort.FirebaseAuthViewModel", (Provider) firebaseAuthViewModelProvider()).put("com.example.cohorts.ui.publicuser.viewmodel.HomeViewmodel", (Provider) homeViewmodelProvider()).put("com.example.cohorts.ui.login.Login1ViewModel", (Provider) login1ViewModelProvider()).put("com.example.cohorts.ui.login.LoginViewModel", (Provider) loginViewModelProvider()).put("com.example.cohorts.ui.main.MainViewModel", (Provider) mainViewModelProvider()).put("com.example.cohorts.ui.profile.ProfileViewModel", (Provider) profileViewModelProvider()).put("com.example.cohorts.ui.splash.SplashViewModel", (Provider) splashViewModelProvider()).put("com.example.cohorts.ui.tasks.taskdetail.TaskDetailViewModel", (Provider) taskDetailViewModelProvider()).put("com.example.cohorts.ui.tasks.TasksViewModel", (Provider) tasksViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.example.cohorts.ui.register.AUthViewModel 
            return (T) ViewModelCImpl.this.aUthViewModel();

            case 1: // com.example.cohorts.ui.cohorts.newcohort.AddNewCohortViewModel 
            return (T) ViewModelCImpl.this.addNewCohortViewModel();

            case 2: // com.example.cohorts.ui.cohorts.newmember.AddNewMemberViewModel 
            return (T) ViewModelCImpl.this.addNewMemberViewModel();

            case 3: // com.example.cohorts.ui.tasks.addNewTask.AddNewTaskViewModel 
            return (T) ViewModelCImpl.this.addNewTaskViewModel();

            case 4: // com.example.cohorts.ui.doctor.AppoinntmentViewModel 
            return (T) ViewModelCImpl.this.appoinntmentViewModel();

            case 5: // com.example.cohorts.ui.chat.ChatViewModel 
            return (T) ViewModelCImpl.this.chatViewModel();

            case 6: // com.example.cohorts.ui.info.CohortInfoViewModel 
            return (T) ViewModelCImpl.this.cohortInfoViewModel();

            case 7: // com.example.cohorts.ui.cohorts.CohortsViewModel 
            return (T) ViewModelCImpl.this.cohortsViewModel();

            case 8: // com.example.cohorts.ui.publicuser.viewmodel.DoctorProfileViewModel 
            return (T) ViewModelCImpl.this.doctorProfileViewModel();

            case 9: // com.example.cohorts.ui.doctor.EditDoctorProfileViewModel 
            return (T) ViewModelCImpl.this.editDoctorProfileViewModel();

            case 10: // com.example.cohorts.repositort.FirebaseAuthViewModel 
            return (T) ViewModelCImpl.this.firebaseAuthViewModel();

            case 11: // com.example.cohorts.ui.publicuser.viewmodel.HomeViewmodel 
            return (T) ViewModelCImpl.this.homeViewmodel();

            case 12: // com.example.cohorts.ui.login.Login1ViewModel 
            return (T) ViewModelCImpl.this.login1ViewModel();

            case 13: // com.example.cohorts.ui.login.LoginViewModel 
            return (T) ViewModelCImpl.this.loginViewModel();

            case 14: // com.example.cohorts.ui.main.MainViewModel 
            return (T) ViewModelCImpl.this.mainViewModel();

            case 15: // com.example.cohorts.ui.profile.ProfileViewModel 
            return (T) ViewModelCImpl.this.profileViewModel();

            case 16: // com.example.cohorts.ui.splash.SplashViewModel 
            return (T) ViewModelCImpl.this.splashViewModel();

            case 17: // com.example.cohorts.ui.tasks.taskdetail.TaskDetailViewModel 
            return (T) ViewModelCImpl.this.taskDetailViewModel();

            case 18: // com.example.cohorts.ui.tasks.TasksViewModel 
            return (T) ViewModelCImpl.this.tasksViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements CohortsApplication_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public CohortsApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends CohortsApplication_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
