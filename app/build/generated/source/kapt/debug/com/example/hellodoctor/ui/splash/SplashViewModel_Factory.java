// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.splash;

import com.example.hellodoctor.core.repository.theme.ThemeRepo;
import com.example.hellodoctor.core.repository.user.UserRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SplashViewModel_Factory implements Factory<SplashViewModel> {
  private final Provider<ThemeRepo> themeRepositoryProvider;

  private final Provider<UserRepo> userRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public SplashViewModel_Factory(Provider<ThemeRepo> themeRepositoryProvider,
      Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.themeRepositoryProvider = themeRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public SplashViewModel get() {
    return newInstance(themeRepositoryProvider.get(), userRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static SplashViewModel_Factory create(Provider<ThemeRepo> themeRepositoryProvider,
      Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new SplashViewModel_Factory(themeRepositoryProvider, userRepositoryProvider, coroutineDispatcherProvider);
  }

  public static SplashViewModel newInstance(ThemeRepo themeRepository, UserRepo userRepository,
      CoroutineDispatcher coroutineDispatcher) {
    return new SplashViewModel(themeRepository, userRepository, coroutineDispatcher);
  }
}
