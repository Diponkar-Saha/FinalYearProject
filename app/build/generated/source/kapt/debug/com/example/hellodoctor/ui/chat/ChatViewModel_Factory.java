// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.chat;

import com.example.hellodoctor.core.repository.chat.ChatRepo;
import com.example.hellodoctor.core.repository.cohorts.CohortsRepo;
import com.example.hellodoctor.core.repository.meeting.MeetingRepo;
import com.example.hellodoctor.core.repository.user.UserRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ChatViewModel_Factory implements Factory<ChatViewModel> {
  private final Provider<CohortsRepo> cohortsRepositoryProvider;

  private final Provider<ChatRepo> chatRepositoryProvider;

  private final Provider<MeetingRepo> meetingRepositoryProvider;

  private final Provider<UserRepo> userRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public ChatViewModel_Factory(Provider<CohortsRepo> cohortsRepositoryProvider,
      Provider<ChatRepo> chatRepositoryProvider, Provider<MeetingRepo> meetingRepositoryProvider,
      Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.cohortsRepositoryProvider = cohortsRepositoryProvider;
    this.chatRepositoryProvider = chatRepositoryProvider;
    this.meetingRepositoryProvider = meetingRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public ChatViewModel get() {
    return newInstance(cohortsRepositoryProvider.get(), chatRepositoryProvider.get(), meetingRepositoryProvider.get(), userRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static ChatViewModel_Factory create(Provider<CohortsRepo> cohortsRepositoryProvider,
      Provider<ChatRepo> chatRepositoryProvider, Provider<MeetingRepo> meetingRepositoryProvider,
      Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new ChatViewModel_Factory(cohortsRepositoryProvider, chatRepositoryProvider, meetingRepositoryProvider, userRepositoryProvider, coroutineDispatcherProvider);
  }

  public static ChatViewModel newInstance(CohortsRepo cohortsRepository, ChatRepo chatRepository,
      MeetingRepo meetingRepository, UserRepo userRepository,
      CoroutineDispatcher coroutineDispatcher) {
    return new ChatViewModel(cohortsRepository, chatRepository, meetingRepository, userRepository, coroutineDispatcher);
  }
}
