// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.tasks.addNewTask;

import com.example.hellodoctor.core.repository.tasks.TasksRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddNewTaskViewModel_Factory implements Factory<AddNewTaskViewModel> {
  private final Provider<TasksRepo> tasksRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public AddNewTaskViewModel_Factory(Provider<TasksRepo> tasksRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.tasksRepositoryProvider = tasksRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public AddNewTaskViewModel get() {
    return newInstance(tasksRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static AddNewTaskViewModel_Factory create(Provider<TasksRepo> tasksRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new AddNewTaskViewModel_Factory(tasksRepositoryProvider, coroutineDispatcherProvider);
  }

  public static AddNewTaskViewModel newInstance(TasksRepo tasksRepository,
      CoroutineDispatcher coroutineDispatcher) {
    return new AddNewTaskViewModel(tasksRepository, coroutineDispatcher);
  }
}
