// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.doctor;

import com.example.hellodoctor.repositort.Preferences;
import com.example.hellodoctor.viewmodel.DoctorRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppoinntmentViewModel_Factory implements Factory<AppoinntmentViewModel> {
  private final Provider<DoctorRepository> repositoryProvider;

  private final Provider<Preferences> sharedPrefProvider;

  public AppoinntmentViewModel_Factory(Provider<DoctorRepository> repositoryProvider,
      Provider<Preferences> sharedPrefProvider) {
    this.repositoryProvider = repositoryProvider;
    this.sharedPrefProvider = sharedPrefProvider;
  }

  @Override
  public AppoinntmentViewModel get() {
    return newInstance(repositoryProvider.get(), sharedPrefProvider.get());
  }

  public static AppoinntmentViewModel_Factory create(Provider<DoctorRepository> repositoryProvider,
      Provider<Preferences> sharedPrefProvider) {
    return new AppoinntmentViewModel_Factory(repositoryProvider, sharedPrefProvider);
  }

  public static AppoinntmentViewModel newInstance(DoctorRepository repository,
      Preferences sharedPref) {
    return new AppoinntmentViewModel(repository, sharedPref);
  }
}
