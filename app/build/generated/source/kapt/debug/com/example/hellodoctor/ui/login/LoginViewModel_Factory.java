// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.login;

import com.example.hellodoctor.core.repository.user.UserRepo;
import com.example.hellodoctor.viewmodel.LoginViewModel;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<UserRepo> userRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public LoginViewModel_Factory(Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(userRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new LoginViewModel_Factory(userRepositoryProvider, coroutineDispatcherProvider);
  }

  public static LoginViewModel newInstance(UserRepo userRepository,
      CoroutineDispatcher coroutineDispatcher) {
    return new LoginViewModel(userRepository, coroutineDispatcher);
  }
}
