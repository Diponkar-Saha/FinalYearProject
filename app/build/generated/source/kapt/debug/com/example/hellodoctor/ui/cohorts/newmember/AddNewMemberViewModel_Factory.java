// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.cohorts.newmember;

import com.example.hellodoctor.core.repository.cohorts.CohortsRepo;
import com.example.hellodoctor.repositort.Preferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddNewMemberViewModel_Factory implements Factory<AddNewMemberViewModel> {
  private final Provider<CohortsRepo> repositoryProvider;

  private final Provider<Preferences> sharedPrefProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public AddNewMemberViewModel_Factory(Provider<CohortsRepo> repositoryProvider,
      Provider<Preferences> sharedPrefProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.repositoryProvider = repositoryProvider;
    this.sharedPrefProvider = sharedPrefProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public AddNewMemberViewModel get() {
    return newInstance(repositoryProvider.get(), sharedPrefProvider.get(), coroutineDispatcherProvider.get());
  }

  public static AddNewMemberViewModel_Factory create(Provider<CohortsRepo> repositoryProvider,
      Provider<Preferences> sharedPrefProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new AddNewMemberViewModel_Factory(repositoryProvider, sharedPrefProvider, coroutineDispatcherProvider);
  }

  public static AddNewMemberViewModel newInstance(CohortsRepo repository, Preferences sharedPref,
      CoroutineDispatcher coroutineDispatcher) {
    return new AddNewMemberViewModel(repository, sharedPref, coroutineDispatcher);
  }
}
