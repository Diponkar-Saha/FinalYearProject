// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.repositort;

import android.content.Context;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.FirebaseStorage;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FirebaseAuthRepository_Factory implements Factory<FirebaseAuthRepository> {
  private final Provider<FirebaseAuth> authenticationProvider;

  private final Provider<FirebaseFirestore> dbProvider;

  private final Provider<FirebaseStorage> storageProvider;

  private final Provider<Preferences> sharedPrefProvider;

  private final Provider<Context> appContextProvider;

  public FirebaseAuthRepository_Factory(Provider<FirebaseAuth> authenticationProvider,
      Provider<FirebaseFirestore> dbProvider, Provider<FirebaseStorage> storageProvider,
      Provider<Preferences> sharedPrefProvider, Provider<Context> appContextProvider) {
    this.authenticationProvider = authenticationProvider;
    this.dbProvider = dbProvider;
    this.storageProvider = storageProvider;
    this.sharedPrefProvider = sharedPrefProvider;
    this.appContextProvider = appContextProvider;
  }

  @Override
  public FirebaseAuthRepository get() {
    return newInstance(authenticationProvider.get(), dbProvider.get(), storageProvider.get(), sharedPrefProvider.get(), appContextProvider.get());
  }

  public static FirebaseAuthRepository_Factory create(Provider<FirebaseAuth> authenticationProvider,
      Provider<FirebaseFirestore> dbProvider, Provider<FirebaseStorage> storageProvider,
      Provider<Preferences> sharedPrefProvider, Provider<Context> appContextProvider) {
    return new FirebaseAuthRepository_Factory(authenticationProvider, dbProvider, storageProvider, sharedPrefProvider, appContextProvider);
  }

  public static FirebaseAuthRepository newInstance(FirebaseAuth authentication,
      FirebaseFirestore db, FirebaseStorage storage, Preferences sharedPref, Context appContext) {
    return new FirebaseAuthRepository(authentication, db, storage, sharedPref, appContext);
  }
}
