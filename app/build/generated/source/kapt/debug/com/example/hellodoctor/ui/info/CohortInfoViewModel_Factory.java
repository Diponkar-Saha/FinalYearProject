// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.info;

import com.example.hellodoctor.core.repository.cohorts.CohortsRepo;
import com.example.hellodoctor.core.repository.user.UserRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CohortInfoViewModel_Factory implements Factory<CohortInfoViewModel> {
  private final Provider<CohortsRepo> cohortsRepositoryProvider;

  private final Provider<UserRepo> userRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public CohortInfoViewModel_Factory(Provider<CohortsRepo> cohortsRepositoryProvider,
      Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.cohortsRepositoryProvider = cohortsRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public CohortInfoViewModel get() {
    return newInstance(cohortsRepositoryProvider.get(), userRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static CohortInfoViewModel_Factory create(Provider<CohortsRepo> cohortsRepositoryProvider,
      Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new CohortInfoViewModel_Factory(cohortsRepositoryProvider, userRepositoryProvider, coroutineDispatcherProvider);
  }

  public static CohortInfoViewModel newInstance(CohortsRepo cohortsRepository,
      UserRepo userRepository, CoroutineDispatcher coroutineDispatcher) {
    return new CohortInfoViewModel(cohortsRepository, userRepository, coroutineDispatcher);
  }
}
