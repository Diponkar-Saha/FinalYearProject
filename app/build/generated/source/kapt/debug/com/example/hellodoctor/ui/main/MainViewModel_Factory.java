// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.ui.main;

import com.example.hellodoctor.core.repository.meeting.MeetingRepo;
import com.example.hellodoctor.core.repository.theme.ThemeRepo;
import com.example.hellodoctor.core.repository.user.UserRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<ThemeRepo> themeRepositoryProvider;

  private final Provider<MeetingRepo> meetingRepositoryProvider;

  private final Provider<UserRepo> userRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public MainViewModel_Factory(Provider<ThemeRepo> themeRepositoryProvider,
      Provider<MeetingRepo> meetingRepositoryProvider, Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.themeRepositoryProvider = themeRepositoryProvider;
    this.meetingRepositoryProvider = meetingRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(themeRepositoryProvider.get(), meetingRepositoryProvider.get(), userRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static MainViewModel_Factory create(Provider<ThemeRepo> themeRepositoryProvider,
      Provider<MeetingRepo> meetingRepositoryProvider, Provider<UserRepo> userRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new MainViewModel_Factory(themeRepositoryProvider, meetingRepositoryProvider, userRepositoryProvider, coroutineDispatcherProvider);
  }

  public static MainViewModel newInstance(ThemeRepo themeRepository, MeetingRepo meetingRepository,
      UserRepo userRepository, CoroutineDispatcher coroutineDispatcher) {
    return new MainViewModel(themeRepository, meetingRepository, userRepository, coroutineDispatcher);
  }
}
