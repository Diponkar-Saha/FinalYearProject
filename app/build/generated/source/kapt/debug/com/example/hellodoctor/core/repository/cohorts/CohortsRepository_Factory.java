// Generated by Dagger (https://dagger.dev).
package com.example.hellodoctor.core.repository.cohorts;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CohortsRepository_Factory implements Factory<CohortsRepository> {
  private final Provider<FirebaseFirestore> firestoreProvider;

  private final Provider<FirebaseAuth> authProvider;

  private final Provider<FirebaseDatabase> firebaseDatabaseProvider;

  public CohortsRepository_Factory(Provider<FirebaseFirestore> firestoreProvider,
      Provider<FirebaseAuth> authProvider, Provider<FirebaseDatabase> firebaseDatabaseProvider) {
    this.firestoreProvider = firestoreProvider;
    this.authProvider = authProvider;
    this.firebaseDatabaseProvider = firebaseDatabaseProvider;
  }

  @Override
  public CohortsRepository get() {
    return newInstance(firestoreProvider.get(), authProvider.get(), firebaseDatabaseProvider.get());
  }

  public static CohortsRepository_Factory create(Provider<FirebaseFirestore> firestoreProvider,
      Provider<FirebaseAuth> authProvider, Provider<FirebaseDatabase> firebaseDatabaseProvider) {
    return new CohortsRepository_Factory(firestoreProvider, authProvider, firebaseDatabaseProvider);
  }

  public static CohortsRepository newInstance(FirebaseFirestore firestore, FirebaseAuth auth,
      FirebaseDatabase firebaseDatabase) {
    return new CohortsRepository(firestore, auth, firebaseDatabase);
  }
}
